// <auto-generated />
using BurgerWebApp.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerWebApp.DataAccess.Migrations
{
    [DbContext(typeof(BurgerWebAppDbContext))]
    partial class BurgerWebAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BurgerWebApp.Domain.Burger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Burger", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://food.fnr.sndimg.com/content/dam/images/food/fullset/2018/4/1/0/LS-Library_Breakfast-Sausage-Egg-Burger_s4x3.jpg.rend.hgtvcom.616.462.suffix/1522644655757.jpeg",
                            Ingredients = "Bun , Sausage , Egg , Tomato , Letuce , Onions",
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Breakfast burger",
                            Price = 150m
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://assets.epicurious.com/photos/57c5c6d9cf9e9ad43de2d96e/master/pass/the-ultimate-hamburger.jpg",
                            Ingredients = "Bun , Beef patty, Tomato ,Letuce , Onions",
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Hamburger",
                            Price = 180m
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://i.pinimg.com/originals/8b/61/11/8b611136ead0d4c247f0fef92925f284.jpg",
                            Ingredients = "Bun , Beef patty , Cheese , Tomato , Letuse , Onions",
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Cheese Burger",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://makeyourmeals.com/wp-content/uploads/2020/05/bacon-cheeseburger-featured-720x540.jpg",
                            Ingredients = "Bun , Beef patty , Tomato , Letuce , Onions , Bacon",
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Bacon Burger",
                            Price = 250m
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://www.hardees.com/-/media/project/cke/hardees/double-cheeseburger-705-x-401.jpgs",
                            Ingredients = "Bun , 2 x Beef patty , Tomato , Letuce , Onions, Cheese",
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Double cheese burger",
                            Price = 250m
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://groundbeefrecipes.com/wp-content/uploads/double-bacon-cheeseburger-recipe-6.jpg",
                            Ingredients = "Bun , 2 x Beef patty , Tomato , Letuce , Onions , Cheese , Bacon",
                            IsVegan = false,
                            IsVegetarian = false,
                            Name = "Double bacon cheese burger",
                            Price = 300m
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://i.ytimg.com/vi/a19EY3YNStA/maxresdefault.jpg",
                            Ingredients = "Whole Wheat Bun Bun , Veggie patty , Tomato , Letuce , Onions",
                            IsVegan = true,
                            IsVegetarian = true,
                            Name = "Veggie Burger",
                            Price = 120m
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://img.sunset02.com/sites/default/files/styles/4_3_horizontal_-_900x675/public/zucchini-burgers-su.jpg",
                            Ingredients = "Whole Wheat Bun , Zucchini patty , Tomato , Letuce , Cucumber , Oninons",
                            IsVegan = false,
                            IsVegetarian = true,
                            Name = "Zucchini Burger",
                            Price = 120m
                        });
                });

            modelBuilder.Entity("BurgerWebApp.Domain.BurgerOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BurgerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("OrderId");

                    b.ToTable("BurgerOrderItem", (string)null);
                });

            modelBuilder.Entity("BurgerWebApp.Domain.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Extra", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small fries",
                            Price = 30m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Large fries",
                            Price = 60m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Small waffle fries",
                            Price = 50m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Large waffle fries",
                            Price = 80m
                        });
                });

            modelBuilder.Entity("BurgerWebApp.Domain.ExtraOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExtraId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.HasIndex("OrderId");

                    b.ToTable("ExtraOrderItem", (string)null);
                });

            modelBuilder.Entity("BurgerWebApp.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClosesAt")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpensAt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Location", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Partizanski orderdi",
                            ClosesAt = 22,
                            Name = "Dacos burgers Skopje Centar",
                            OpensAt = 8
                        },
                        new
                        {
                            Id = 2,
                            Address = "Jane Sandanski",
                            ClosesAt = 22,
                            Name = "Dacos burgers Skopje Aerodrom",
                            OpensAt = 8
                        },
                        new
                        {
                            Id = 3,
                            Address = "7mi Noemvri",
                            ClosesAt = 22,
                            Name = "Dacos burgers Ohrid",
                            OpensAt = 8
                        },
                        new
                        {
                            Id = 4,
                            Address = "Ilindenska",
                            ClosesAt = 22,
                            Name = "Dacos burgers Bitola",
                            OpensAt = 8
                        });
                });

            modelBuilder.Entity("BurgerWebApp.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrderCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BurgerWebApp.Domain.BurgerOrderItem", b =>
                {
                    b.HasOne("BurgerWebApp.Domain.Burger", "Burger")
                        .WithMany()
                        .HasForeignKey("BurgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerWebApp.Domain.Order", "Order")
                        .WithMany("Burgers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burger");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BurgerWebApp.Domain.ExtraOrderItem", b =>
                {
                    b.HasOne("BurgerWebApp.Domain.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerWebApp.Domain.Order", "Order")
                        .WithMany("Extras")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extra");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BurgerWebApp.Domain.Order", b =>
                {
                    b.HasOne("BurgerWebApp.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BurgerWebApp.Domain.Order", b =>
                {
                    b.Navigation("Burgers");

                    b.Navigation("Extras");
                });
#pragma warning restore 612, 618
        }
    }
}
